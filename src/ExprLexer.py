# Generated from Expr.g by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,71,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,1,4,1,28,8,
        1,11,1,12,1,29,1,2,4,2,33,8,2,11,2,12,2,34,1,3,4,3,38,8,3,11,3,12,
        3,39,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
        1,10,1,10,1,10,1,10,5,10,61,8,10,10,10,12,10,64,9,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,62,0,11,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,1,0,3,2,0,65,90,97,122,1,0,48,57,2,0,9,10,32,32,74,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,1,23,1,0,0,0,3,27,1,0,0,0,5,32,1,0,0,0,7,37,1,0,0,0,9,43,
        1,0,0,0,11,45,1,0,0,0,13,47,1,0,0,0,15,49,1,0,0,0,17,51,1,0,0,0,
        19,53,1,0,0,0,21,55,1,0,0,0,23,24,5,60,0,0,24,25,5,45,0,0,25,2,1,
        0,0,0,26,28,7,0,0,0,27,26,1,0,0,0,28,29,1,0,0,0,29,27,1,0,0,0,29,
        30,1,0,0,0,30,4,1,0,0,0,31,33,7,1,0,0,32,31,1,0,0,0,33,34,1,0,0,
        0,34,32,1,0,0,0,34,35,1,0,0,0,35,6,1,0,0,0,36,38,7,2,0,0,37,36,1,
        0,0,0,38,39,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,41,1,0,0,0,41,
        42,6,3,0,0,42,8,1,0,0,0,43,44,5,47,0,0,44,10,1,0,0,0,45,46,5,37,
        0,0,46,12,1,0,0,0,47,48,5,43,0,0,48,14,1,0,0,0,49,50,5,45,0,0,50,
        16,1,0,0,0,51,52,5,42,0,0,52,18,1,0,0,0,53,54,5,94,0,0,54,20,1,0,
        0,0,55,56,5,126,0,0,56,57,5,126,0,0,57,58,5,126,0,0,58,62,1,0,0,
        0,59,61,9,0,0,0,60,59,1,0,0,0,61,64,1,0,0,0,62,63,1,0,0,0,62,60,
        1,0,0,0,63,65,1,0,0,0,64,62,1,0,0,0,65,66,5,126,0,0,66,67,5,126,
        0,0,67,68,5,126,0,0,68,69,1,0,0,0,69,70,6,10,0,0,70,22,1,0,0,0,5,
        0,29,34,39,62,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    ID = 2
    NUM = 3
    WS = 4
    DIV = 5
    MOD = 6
    MES = 7
    MINUS = 8
    MULT = 9
    POT = 10
    COMMENT = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<-'", "'/'", "'%'", "'+'", "'-'", "'*'", "'^'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "WS", "DIV", "MOD", "MES", "MINUS", "MULT", "POT", 
            "COMMENT" ]

    ruleNames = [ "T__0", "ID", "NUM", "WS", "DIV", "MOD", "MES", "MINUS", 
                  "MULT", "POT", "COMMENT" ]

    grammarFileName = "Expr.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


